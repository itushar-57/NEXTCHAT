import React, { useState } from 'react';
import { Hash, Plus, Settings, Volume2 } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import ServerIcon from './ServerIcon';

export default function ServerSidebar({
  server,
  channels,
  selectedChannel,
  onChannelSelect,
  onCreateChannel,
  user
}) {
  const [showCreateChannel, setShowCreateChannel] = useState(false);
  const [newChannelName, setNewChannelName] = useState("");

  const handleCreateChannel = () => {
    if (newChannelName.trim()) {
      onCreateChannel(newChannelName);
      setNewChannelName("");
      setShowCreateChannel(false);
    }
  };

  const isOwner = server?.owner_id === user?.id;

  return (
    <div className="w-60 bg-discord-darker flex flex-col">
      {/* Server Header */}
      <div className="p-4 border-b border-discord-dark">
        <div className="flex items-center gap-3">
          <ServerIcon server={server} size="md" />
          <div className="flex-1 min-w-0">
            <h2 className="font-bold text-white truncate">{server?.name}</h2>
            {isOwner && (
              <p className="text-xs text-discord-blurple">Server Owner</p>
            )}
          </div>
          {isOwner && (
            <Button variant="ghost" size="icon" className="w-6 h-6 text-gray-400 hover:text-white">
              <Settings className="w-4 h-4" />
            </Button>
          )}
        </div>
      </div>

      {/* Channels Section */}
      <div className="flex-1 p-3 space-y-1 scrollbar-thin overflow-y-auto">
        <div className="flex items-center justify-between mb-2">
          <h3 className="text-xs font-semibold text-gray-400 uppercase tracking-wider">
            Text Channels
          </h3>
          <Dialog open={showCreateChannel} onOpenChange={setShowCreateChannel}>
            <DialogTrigger asChild>
              <Button variant="ghost" size="icon" className="w-4 h-4 text-gray-400 hover:text-white">
                <Plus className="w-3 h-3" />
              </Button>
            </DialogTrigger>
            <DialogContent className="bg-discord-darker border-discord-dark">
              <DialogHeader>
                <DialogTitle className="text-white">Create Channel</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-300 mb-2 block">
                    Channel Name
                  </label>
                  <Input
                    value={newChannelName}
                    onChange={(e) => setNewChannelName(e.target.value)}
                    placeholder="new-channel"
                    className="bg-discord-darkest border-discord-dark text-white"
                    onKeyDown={(e) => e.key === 'Enter' && handleCreateChannel()}
                  />
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setShowCreateChannel(false)}
                    className="flex-1 border-discord-dark text-gray-300"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleCreateChannel}
                    className="flex-1 bg-discord-blurple hover:bg-blue-600"
                    disabled={!newChannelName.trim()}
                  >
                    Create Channel
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {channels.map(channel => (
          <button
            key={channel.id}
            onClick={() => onChannelSelect(channel)}
            className={`w-full flex items-center gap-2 p-2 rounded transition-colors text-left ${
              selectedChannel?.id === channel.id
                ? "bg-discord-dark text-white"
                : "text-gray-300 hover:bg-discord-dark hover:text-white"
            }`}
          >
            <Hash className="w-4 h-4 text-gray-400 flex-shrink-0" />
            <span className="truncate">{channel.name}</span>
          </button>
        ))}
      </div>
    </div>
  );
}